<?php
/**
 * ProductsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\Storefront\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Storefront API - Products
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: storefront-v1-products
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\Storefront\Products\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aurigma\Storefront\Products\ApiException;
use Aurigma\Storefront\Products\Configuration;
use Aurigma\Storefront\Products\HeaderSelector;
use Aurigma\Storefront\Products\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  Aurigma\Storefront\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productsGetAllProductOptions
     *
     * Returns a list of product options for all products.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductOptionDto
     */
    public function productsGetAllProductOptions($tenant_id = null)
    {
        list($response) = $this->productsGetAllProductOptionsWithHttpInfo($tenant_id);
        return $response;
    }

    /**
     * Operation productsGetAllProductOptionsWithHttpInfo
     *
     * Returns a list of product options for all products.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductOptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetAllProductOptionsWithHttpInfo($tenant_id = null)
    {
        $request = $this->productsGetAllProductOptionsRequest($tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetAllProductOptionsAsync
     *
     * Returns a list of product options for all products.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAllProductOptionsAsync($tenant_id = null)
    {
        return $this->productsGetAllProductOptionsAsyncWithHttpInfo($tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetAllProductOptionsAsyncWithHttpInfo
     *
     * Returns a list of product options for all products.
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAllProductOptionsAsyncWithHttpInfo($tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto';
        $request = $this->productsGetAllProductOptionsRequest($tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetAllProductOptions'
     *
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetAllProductOptionsRequest($tenant_id = null)
    {

        $resourcePath = '/api/storefront/v1/products/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetAllProducts
     *
     * Returns all products, relevant to the specified query parameters.
     *
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  string[] $tags List of tags that product should have. (optional)
     * @param  string $custom_fields Serialized custom fields dictionary filter. For example: {\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;} (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductDto
     */
    public function productsGetAllProducts($skip = null, $take = null, $sorting = null, $search = null, $sku = null, $tags = null, $custom_fields = null, $tenant_id = null)
    {
        list($response) = $this->productsGetAllProductsWithHttpInfo($skip, $take, $sorting, $search, $sku, $tags, $custom_fields, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetAllProductsWithHttpInfo
     *
     * Returns all products, relevant to the specified query parameters.
     *
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  string[] $tags List of tags that product should have. (optional)
     * @param  string $custom_fields Serialized custom fields dictionary filter. For example: {\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;} (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetAllProductsWithHttpInfo($skip = null, $take = null, $sorting = null, $search = null, $sku = null, $tags = null, $custom_fields = null, $tenant_id = null)
    {
        $request = $this->productsGetAllProductsRequest($skip, $take, $sorting, $search, $sku, $tags, $custom_fields, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetAllProductsAsync
     *
     * Returns all products, relevant to the specified query parameters.
     *
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  string[] $tags List of tags that product should have. (optional)
     * @param  string $custom_fields Serialized custom fields dictionary filter. For example: {\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;} (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAllProductsAsync($skip = null, $take = null, $sorting = null, $search = null, $sku = null, $tags = null, $custom_fields = null, $tenant_id = null)
    {
        return $this->productsGetAllProductsAsyncWithHttpInfo($skip, $take, $sorting, $search, $sku, $tags, $custom_fields, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetAllProductsAsyncWithHttpInfo
     *
     * Returns all products, relevant to the specified query parameters.
     *
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  string[] $tags List of tags that product should have. (optional)
     * @param  string $custom_fields Serialized custom fields dictionary filter. For example: {\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;} (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAllProductsAsyncWithHttpInfo($skip = null, $take = null, $sorting = null, $search = null, $sku = null, $tags = null, $custom_fields = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductDto';
        $request = $this->productsGetAllProductsRequest($skip, $take, $sorting, $search, $sku, $tags, $custom_fields, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetAllProducts'
     *
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  string[] $tags List of tags that product should have. (optional)
     * @param  string $custom_fields Serialized custom fields dictionary filter. For example: {\&quot;public\&quot;:\&quot;true\&quot;,\&quot;name\&quot;:\&quot;my item\&quot;} (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetAllProductsRequest($skip = null, $take = null, $sorting = null, $search = null, $sku = null, $tags = null, $custom_fields = null, $tenant_id = null)
    {

        $resourcePath = '/api/storefront/v1/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($sku !== null) {
            if('form' === 'form' && is_array($sku)) {
                foreach($sku as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku'] = $sku;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($custom_fields !== null) {
            if('form' === 'form' && is_array($custom_fields)) {
                foreach($custom_fields as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customFields'] = $custom_fields;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetAvailableProductTags
     *
     * Returns a list of all available product tags.
     *
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function productsGetAvailableProductTags($search = null, $tenant_id = null)
    {
        list($response) = $this->productsGetAvailableProductTagsWithHttpInfo($search, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetAvailableProductTagsWithHttpInfo
     *
     * Returns a list of all available product tags.
     *
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetAvailableProductTagsWithHttpInfo($search = null, $tenant_id = null)
    {
        $request = $this->productsGetAvailableProductTagsRequest($search, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetAvailableProductTagsAsync
     *
     * Returns a list of all available product tags.
     *
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAvailableProductTagsAsync($search = null, $tenant_id = null)
    {
        return $this->productsGetAvailableProductTagsAsyncWithHttpInfo($search, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetAvailableProductTagsAsyncWithHttpInfo
     *
     * Returns a list of all available product tags.
     *
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetAvailableProductTagsAsyncWithHttpInfo($search = null, $tenant_id = null)
    {
        $returnType = 'string[]';
        $request = $this->productsGetAvailableProductTagsRequest($search, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetAvailableProductTags'
     *
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetAvailableProductTagsRequest($search = null, $tenant_id = null)
    {

        $resourcePath = '/api/storefront/v1/products/available-tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProduct
     *
     * Returns a product by identifier.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\ProductDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProduct($id, $product_version_id = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductWithHttpInfo($id, $product_version_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductWithHttpInfo
     *
     * Returns a product by identifier.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\ProductDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsGetProductRequest($id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\ProductDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\ProductDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\ProductDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\ProductDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductAsync
     *
     * Returns a product by identifier.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductAsync($id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsGetProductAsyncWithHttpInfo($id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductAsyncWithHttpInfo
     *
     * Returns a product by identifier.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductAsyncWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\ProductDto';
        $request = $this->productsGetProductRequest($id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProduct'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductRequest($id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProduct'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductFilter
     *
     * Returns a product filter.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_filter_id Product filter identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\ProductFilterDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductFilter($id, $product_filter_id, $product_version_id = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductFilterWithHttpInfo($id, $product_filter_id, $product_version_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductFilterWithHttpInfo
     *
     * Returns a product filter.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_filter_id Product filter identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\ProductFilterDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductFilterWithHttpInfo($id, $product_filter_id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsGetProductFilterRequest($id, $product_filter_id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\ProductFilterDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\ProductFilterDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\ProductFilterDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\ProductFilterDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductFilterAsync
     *
     * Returns a product filter.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_filter_id Product filter identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductFilterAsync($id, $product_filter_id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsGetProductFilterAsyncWithHttpInfo($id, $product_filter_id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductFilterAsyncWithHttpInfo
     *
     * Returns a product filter.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_filter_id Product filter identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductFilterAsyncWithHttpInfo($id, $product_filter_id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\ProductFilterDto';
        $request = $this->productsGetProductFilterRequest($id, $product_filter_id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductFilter'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_filter_id Product filter identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductFilterRequest($id, $product_filter_id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductFilter'
            );
        }
        // verify the required parameter 'product_filter_id' is set
        if ($product_filter_id === null || (is_array($product_filter_id) && count($product_filter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_filter_id when calling productsGetProductFilter'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/filters/{productFilterId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($product_filter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productFilterId' . '}',
                ObjectSerializer::toPathValue($product_filter_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductFilters
     *
     * Returns a list of product filters.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\ProductFilterType $filter_type Defines filter type paramer. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductFilterDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductFilters($id, $product_version_id = null, $filter_type = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductFiltersWithHttpInfo($id, $product_version_id, $filter_type, $skip, $take, $sorting, $search, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductFiltersWithHttpInfo
     *
     * Returns a list of product filters.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\ProductFilterType $filter_type Defines filter type paramer. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductFilterDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductFiltersWithHttpInfo($id, $product_version_id = null, $filter_type = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $request = $this->productsGetProductFiltersRequest($id, $product_version_id, $filter_type, $skip, $take, $sorting, $search, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductFilterDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductFilterDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductFilterDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductFilterDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductFiltersAsync
     *
     * Returns a list of product filters.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\ProductFilterType $filter_type Defines filter type paramer. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductFiltersAsync($id, $product_version_id = null, $filter_type = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        return $this->productsGetProductFiltersAsyncWithHttpInfo($id, $product_version_id, $filter_type, $skip, $take, $sorting, $search, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductFiltersAsyncWithHttpInfo
     *
     * Returns a list of product filters.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\ProductFilterType $filter_type Defines filter type paramer. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductFiltersAsyncWithHttpInfo($id, $product_version_id = null, $filter_type = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductFilterDto';
        $request = $this->productsGetProductFiltersRequest($id, $product_version_id, $filter_type, $skip, $take, $sorting, $search, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductFilters'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\ProductFilterType $filter_type Defines filter type paramer. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductFiltersRequest($id, $product_version_id = null, $filter_type = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductFilters'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($filter_type !== null) {
            if('form' === 'form' && is_array($filter_type)) {
                foreach($filter_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filterType'] = $filter_type;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductLink
     *
     * Returns a product link.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_link_id Product link identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\ProductLinkDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductLink($id, $product_link_id, $product_version_id = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductLinkWithHttpInfo($id, $product_link_id, $product_version_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductLinkWithHttpInfo
     *
     * Returns a product link.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_link_id Product link identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\ProductLinkDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductLinkWithHttpInfo($id, $product_link_id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsGetProductLinkRequest($id, $product_link_id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\ProductLinkDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\ProductLinkDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\ProductLinkDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\ProductLinkDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductLinkAsync
     *
     * Returns a product link.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_link_id Product link identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductLinkAsync($id, $product_link_id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsGetProductLinkAsyncWithHttpInfo($id, $product_link_id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductLinkAsyncWithHttpInfo
     *
     * Returns a product link.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_link_id Product link identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductLinkAsyncWithHttpInfo($id, $product_link_id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\ProductLinkDto';
        $request = $this->productsGetProductLinkRequest($id, $product_link_id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductLink'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_link_id Product link identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductLinkRequest($id, $product_link_id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductLink'
            );
        }
        // verify the required parameter 'product_link_id' is set
        if ($product_link_id === null || (is_array($product_link_id) && count($product_link_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_link_id when calling productsGetProductLink'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/links/{productLinkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($product_link_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productLinkId' . '}',
                ObjectSerializer::toPathValue($product_link_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductLinks
     *
     * Returns a list of product links.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductLinkDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductLinks($id, $product_version_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductLinksWithHttpInfo($id, $product_version_id, $skip, $take, $sorting, $search, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductLinksWithHttpInfo
     *
     * Returns a list of product links.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductLinkDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductLinksWithHttpInfo($id, $product_version_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $request = $this->productsGetProductLinksRequest($id, $product_version_id, $skip, $take, $sorting, $search, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductLinkDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductLinkDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductLinkDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductLinkDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductLinksAsync
     *
     * Returns a list of product links.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductLinksAsync($id, $product_version_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        return $this->productsGetProductLinksAsyncWithHttpInfo($id, $product_version_id, $skip, $take, $sorting, $search, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductLinksAsyncWithHttpInfo
     *
     * Returns a list of product links.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductLinksAsyncWithHttpInfo($id, $product_version_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductLinkDto';
        $request = $this->productsGetProductLinksRequest($id, $product_version_id, $skip, $take, $sorting, $search, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductLinks'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $sorting Defines sorting order of result list e.g.: \&quot;Title ASC, LastModified DESC\&quot;. (optional)
     * @param  string $search Search string for partial match. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductLinksRequest($id, $product_version_id = null, $skip = null, $take = null, $sorting = null, $search = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductLinks'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($sorting !== null) {
            if('form' === 'form' && is_array($sorting)) {
                foreach($sorting as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sorting'] = $sorting;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductOptions
     *
     * Returns a list of product options.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductOptionDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductOptions($id, $product_version_id = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductOptionsWithHttpInfo($id, $product_version_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductOptionsWithHttpInfo
     *
     * Returns a list of product options.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductOptionDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductOptionsWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsGetProductOptionsRequest($id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductOptionsAsync
     *
     * Returns a list of product options.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductOptionsAsync($id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsGetProductOptionsAsyncWithHttpInfo($id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductOptionsAsyncWithHttpInfo
     *
     * Returns a list of product options.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductOptionsAsyncWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductOptionDto';
        $request = $this->productsGetProductOptionsRequest($id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductOptions'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductOptionsRequest($id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductOptions'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductVariant
     *
     * Returns a product variant.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_variant_id Product variant identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\ProductVariantDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductVariant($id, $product_variant_id, $product_version_id = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductVariantWithHttpInfo($id, $product_variant_id, $product_version_id, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductVariantWithHttpInfo
     *
     * Returns a product variant.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_variant_id Product variant identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\ProductVariantDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductVariantWithHttpInfo($id, $product_variant_id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsGetProductVariantRequest($id, $product_variant_id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\ProductVariantDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\ProductVariantDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\ProductVariantDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\ProductVariantDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductVariantAsync
     *
     * Returns a product variant.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_variant_id Product variant identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantAsync($id, $product_variant_id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsGetProductVariantAsyncWithHttpInfo($id, $product_variant_id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductVariantAsyncWithHttpInfo
     *
     * Returns a product variant.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_variant_id Product variant identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantAsyncWithHttpInfo($id, $product_variant_id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\ProductVariantDto';
        $request = $this->productsGetProductVariantRequest($id, $product_variant_id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductVariant'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_variant_id Product variant identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductVariantRequest($id, $product_variant_id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductVariant'
            );
        }
        // verify the required parameter 'product_variant_id' is set
        if ($product_variant_id === null || (is_array($product_variant_id) && count($product_variant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_variant_id when calling productsGetProductVariant'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/variants/{productVariantId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($product_variant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productVariantId' . '}',
                ObjectSerializer::toPathValue($product_variant_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductVariantDesigns
     *
     * Returns a list of product variant designs.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductVariantDesigns($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductVariantDesignsWithHttpInfo($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductVariantDesignsWithHttpInfo
     *
     * Returns a list of product variant designs.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductVariantDesignsWithHttpInfo($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $request = $this->productsGetProductVariantDesignsRequest($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductVariantDesignsAsync
     *
     * Returns a list of product variant designs.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantDesignsAsync($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        return $this->productsGetProductVariantDesignsAsyncWithHttpInfo($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductVariantDesignsAsyncWithHttpInfo
     *
     * Returns a list of product variant designs.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantDesignsAsyncWithHttpInfo($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDesignDto';
        $request = $this->productsGetProductVariantDesignsRequest($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductVariantDesigns'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductVariantDesignsRequest($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductVariantDesigns'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/variant-designs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($product_variant_id !== null) {
            if('form' === 'form' && is_array($product_variant_id)) {
                foreach($product_variant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVariantId'] = $product_variant_id;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }
        // query params
        if ($product_filter_id !== null) {
            if('form' === 'form' && is_array($product_filter_id)) {
                foreach($product_filter_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productFilterId'] = $product_filter_id;
            }
        }
        // query params
        if ($take_available_only !== null) {
            if('form' === 'form' && is_array($take_available_only)) {
                foreach($take_available_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['takeAvailableOnly'] = $take_available_only;
            }
        }
        // query params
        if ($sku !== null) {
            if('form' === 'form' && is_array($sku)) {
                foreach($sku as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku'] = $sku;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductVariantMockups
     *
     * Returns a list of product variant mockups.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductVariantMockups($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductVariantMockupsWithHttpInfo($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductVariantMockupsWithHttpInfo
     *
     * Returns a list of product variant mockups.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductVariantMockupsWithHttpInfo($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $request = $this->productsGetProductVariantMockupsRequest($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductVariantMockupsAsync
     *
     * Returns a list of product variant mockups.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantMockupsAsync($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        return $this->productsGetProductVariantMockupsAsyncWithHttpInfo($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductVariantMockupsAsyncWithHttpInfo
     *
     * Returns a list of product variant mockups.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantMockupsAsyncWithHttpInfo($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantMockupDto';
        $request = $this->productsGetProductVariantMockupsRequest($id, $product_version_id, $product_variant_id, $search, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductVariantMockups'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $product_variant_id Product variant identifier. (optional)
     * @param  string $search Search string for design name partial match. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductVariantMockupsRequest($id, $product_version_id = null, $product_variant_id = null, $search = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductVariantMockups'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/variant-mockups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($product_variant_id !== null) {
            if('form' === 'form' && is_array($product_variant_id)) {
                foreach($product_variant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVariantId'] = $product_variant_id;
            }
        }
        // query params
        if ($search !== null) {
            if('form' === 'form' && is_array($search)) {
                foreach($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }
        // query params
        if ($product_filter_id !== null) {
            if('form' === 'form' && is_array($product_filter_id)) {
                foreach($product_filter_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productFilterId'] = $product_filter_id;
            }
        }
        // query params
        if ($take_available_only !== null) {
            if('form' === 'form' && is_array($take_available_only)) {
                foreach($take_available_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['takeAvailableOnly'] = $take_available_only;
            }
        }
        // query params
        if ($sku !== null) {
            if('form' === 'form' && is_array($sku)) {
                foreach($sku as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku'] = $sku;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsGetProductVariants
     *
     * Returns a list of product variants.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Aurigma\Storefront\Products\Model\PagedOfProductVariantDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails
     */
    public function productsGetProductVariants($id, $product_version_id = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        list($response) = $this->productsGetProductVariantsWithHttpInfo($id, $product_version_id, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);
        return $response;
    }

    /**
     * Operation productsGetProductVariantsWithHttpInfo
     *
     * Returns a list of product variants.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Aurigma\Storefront\Products\Model\PagedOfProductVariantDto|\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsGetProductVariantsWithHttpInfo($id, $product_version_id = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $request = $this->productsGetProductVariantsRequest($id, $product_version_id, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Aurigma\Storefront\Products\Model\PagedOfProductVariantDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsGetProductVariantsAsync
     *
     * Returns a list of product variants.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantsAsync($id, $product_version_id = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        return $this->productsGetProductVariantsAsyncWithHttpInfo($id, $product_version_id, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsGetProductVariantsAsyncWithHttpInfo
     *
     * Returns a list of product variants.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsGetProductVariantsAsyncWithHttpInfo($id, $product_version_id = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        $returnType = '\Aurigma\Storefront\Products\Model\PagedOfProductVariantDto';
        $request = $this->productsGetProductVariantsRequest($id, $product_version_id, $skip, $take, $options, $product_filter_id, $take_available_only, $sku, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsGetProductVariants'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $skip Defines page start offset from beginning of sorted result list. (optional)
     * @param  int $take Defines page length (how many consequent items of sorted result list should be taken). (optional)
     * @param  string $options Defines options filter e.g.: \&quot;{ \&quot;opt1_id\&quot;: \&quot;opt1_val1_id, opt1_val2_id\&quot;, \&quot;opt2_id\&quot;: \&quot;opt2_val1_id\&quot; }\&quot;. (optional)
     * @param  int $product_filter_id Defines special filter based on product filter with specified identifier. (optional)
     * @param  bool $take_available_only Defines special filter for available product variants. (optional)
     * @param  string $sku SKU of linked ecommerce product. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsGetProductVariantsRequest($id, $product_version_id = null, $skip = null, $take = null, $options = null, $product_filter_id = null, $take_available_only = null, $sku = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsGetProductVariants'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/variants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($skip !== null) {
            if('form' === 'form' && is_array($skip)) {
                foreach($skip as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skip'] = $skip;
            }
        }
        // query params
        if ($take !== null) {
            if('form' === 'form' && is_array($take)) {
                foreach($take as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['take'] = $take;
            }
        }
        // query params
        if ($options !== null) {
            if('form' === 'form' && is_array($options)) {
                foreach($options as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['options'] = $options;
            }
        }
        // query params
        if ($product_filter_id !== null) {
            if('form' === 'form' && is_array($product_filter_id)) {
                foreach($product_filter_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productFilterId'] = $product_filter_id;
            }
        }
        // query params
        if ($take_available_only !== null) {
            if('form' === 'form' && is_array($take_available_only)) {
                foreach($take_available_only as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['takeAvailableOnly'] = $take_available_only;
            }
        }
        // query params
        if ($sku !== null) {
            if('form' === 'form' && is_array($sku)) {
                foreach($sku as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku'] = $sku;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsSetProductVariantPrice
     *
     * Set product variant price.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\SetProductVariantPriceDto[] $set_product_variant_price_dto Set product variant price operation parameters. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productsSetProductVariantPrice($id, $product_version_id = null, $tenant_id = null, $set_product_variant_price_dto = null)
    {
        $this->productsSetProductVariantPriceWithHttpInfo($id, $product_version_id, $tenant_id, $set_product_variant_price_dto);
    }

    /**
     * Operation productsSetProductVariantPriceWithHttpInfo
     *
     * Set product variant price.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\SetProductVariantPriceDto[] $set_product_variant_price_dto Set product variant price operation parameters. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsSetProductVariantPriceWithHttpInfo($id, $product_version_id = null, $tenant_id = null, $set_product_variant_price_dto = null)
    {
        $request = $this->productsSetProductVariantPriceRequest($id, $product_version_id, $tenant_id, $set_product_variant_price_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsSetProductVariantPriceAsync
     *
     * Set product variant price.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\SetProductVariantPriceDto[] $set_product_variant_price_dto Set product variant price operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsSetProductVariantPriceAsync($id, $product_version_id = null, $tenant_id = null, $set_product_variant_price_dto = null)
    {
        return $this->productsSetProductVariantPriceAsyncWithHttpInfo($id, $product_version_id, $tenant_id, $set_product_variant_price_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsSetProductVariantPriceAsyncWithHttpInfo
     *
     * Set product variant price.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\SetProductVariantPriceDto[] $set_product_variant_price_dto Set product variant price operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsSetProductVariantPriceAsyncWithHttpInfo($id, $product_version_id = null, $tenant_id = null, $set_product_variant_price_dto = null)
    {
        $returnType = '';
        $request = $this->productsSetProductVariantPriceRequest($id, $product_version_id, $tenant_id, $set_product_variant_price_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsSetProductVariantPrice'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     * @param  \Aurigma\Storefront\Products\Model\SetProductVariantPriceDto[] $set_product_variant_price_dto Set product variant price operation parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsSetProductVariantPriceRequest($id, $product_version_id = null, $tenant_id = null, $set_product_variant_price_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsSetProductVariantPrice'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/set-variant-price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($set_product_variant_price_dto)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($set_product_variant_price_dto));
            } else {
                $httpBody = $set_product_variant_price_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsUpdateProductVariantResources
     *
     * Updates product variant resources.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productsUpdateProductVariantResources($id, $product_version_id = null, $tenant_id = null)
    {
        $this->productsUpdateProductVariantResourcesWithHttpInfo($id, $product_version_id, $tenant_id);
    }

    /**
     * Operation productsUpdateProductVariantResourcesWithHttpInfo
     *
     * Updates product variant resources.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \Aurigma\Storefront\Products\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsUpdateProductVariantResourcesWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $request = $this->productsUpdateProductVariantResourcesRequest($id, $product_version_id, $tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aurigma\Storefront\Products\Model\MicrosoftAspNetCoreMvcProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productsUpdateProductVariantResourcesAsync
     *
     * Updates product variant resources.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsUpdateProductVariantResourcesAsync($id, $product_version_id = null, $tenant_id = null)
    {
        return $this->productsUpdateProductVariantResourcesAsyncWithHttpInfo($id, $product_version_id, $tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productsUpdateProductVariantResourcesAsyncWithHttpInfo
     *
     * Updates product variant resources.
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsUpdateProductVariantResourcesAsyncWithHttpInfo($id, $product_version_id = null, $tenant_id = null)
    {
        $returnType = '';
        $request = $this->productsUpdateProductVariantResourcesRequest($id, $product_version_id, $tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsUpdateProductVariantResources'
     *
     * @param  int $id Product identifier. (required)
     * @param  int $product_version_id Product version identifier. (optional)
     * @param  int $tenant_id Tenant identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsUpdateProductVariantResourcesRequest($id, $product_version_id = null, $tenant_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productsUpdateProductVariantResources'
            );
        }

        $resourcePath = '/api/storefront/v1/products/{id}/update-variant-resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($product_version_id !== null) {
            if('form' === 'form' && is_array($product_version_id)) {
                foreach($product_version_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['productVersionId'] = $product_version_id;
            }
        }
        // query params
        if ($tenant_id !== null) {
            if('form' === 'form' && is_array($tenant_id)) {
                foreach($tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantId'] = $tenant_id;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        // aurigmafix 6
                        if (gettype($formParamValueItem) === 'object') {
                            if (!($formParamValueItem instanceof StreamInterface 
                            || $formParamValueItem instanceof \Iterator 
                            || method_exists($formParamValueItem, '__toString'))) {
                                $formParamValueItem = json_encode($formParamValueItem);
                            }
                        } 
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        // aurigmafix 3
        $token = $this->config->getAccessToken();
        if ($token !== null && $token !== '' && !ctype_space($token)) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
