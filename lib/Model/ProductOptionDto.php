<?php
/**
 * ProductOptionDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Aurigma\Storefront\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Storefront API - Products
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: storefront-v1-products
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aurigma\Storefront\Products\Model;

use \ArrayAccess;
use \Aurigma\Storefront\Products\ObjectSerializer;

/**
 * ProductOptionDto Class Doc Comment
 *
 * @category Class
 * @description Dto class, containing information about a product option.
 * @package  Aurigma\Storefront\Products
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductOptionDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductOptionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'product_version_id' => 'int',
        'product_id' => 'int',
        'tenant_id' => 'int',
        'type' => '\Aurigma\Storefront\Products\Model\OptionType',
        'traits' => 'string[]',
        'title' => 'string',
        'sort_index' => 'int',
        'tag' => 'string',
        'use_for_design_binding' => 'bool',
        'use_for_mockup_binding' => 'bool',
        'description' => 'string',
        'tooltip' => 'string',
        'appearance_data' => '\Aurigma\Storefront\Products\Model\AppearanceDataDto',
        'image' => '\Aurigma\Storefront\Products\Model\ImageInfo',
        'product_option_values' => '\Aurigma\Storefront\Products\Model\ProductOptionValueDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'product_version_id' => 'int32',
        'product_id' => 'int32',
        'tenant_id' => 'int32',
        'type' => null,
        'traits' => null,
        'title' => null,
        'sort_index' => 'int32',
        'tag' => null,
        'use_for_design_binding' => null,
        'use_for_mockup_binding' => null,
        'description' => null,
        'tooltip' => null,
        'appearance_data' => null,
        'image' => null,
        'product_option_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_version_id' => 'productVersionId',
        'product_id' => 'productId',
        'tenant_id' => 'tenantId',
        'type' => 'type',
        'traits' => 'traits',
        'title' => 'title',
        'sort_index' => 'sortIndex',
        'tag' => 'tag',
        'use_for_design_binding' => 'useForDesignBinding',
        'use_for_mockup_binding' => 'useForMockupBinding',
        'description' => 'description',
        'tooltip' => 'tooltip',
        'appearance_data' => 'appearanceData',
        'image' => 'image',
        'product_option_values' => 'productOptionValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_version_id' => 'setProductVersionId',
        'product_id' => 'setProductId',
        'tenant_id' => 'setTenantId',
        'type' => 'setType',
        'traits' => 'setTraits',
        'title' => 'setTitle',
        'sort_index' => 'setSortIndex',
        'tag' => 'setTag',
        'use_for_design_binding' => 'setUseForDesignBinding',
        'use_for_mockup_binding' => 'setUseForMockupBinding',
        'description' => 'setDescription',
        'tooltip' => 'setTooltip',
        'appearance_data' => 'setAppearanceData',
        'image' => 'setImage',
        'product_option_values' => 'setProductOptionValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_version_id' => 'getProductVersionId',
        'product_id' => 'getProductId',
        'tenant_id' => 'getTenantId',
        'type' => 'getType',
        'traits' => 'getTraits',
        'title' => 'getTitle',
        'sort_index' => 'getSortIndex',
        'tag' => 'getTag',
        'use_for_design_binding' => 'getUseForDesignBinding',
        'use_for_mockup_binding' => 'getUseForMockupBinding',
        'description' => 'getDescription',
        'tooltip' => 'getTooltip',
        'appearance_data' => 'getAppearanceData',
        'image' => 'getImage',
        'product_option_values' => 'getProductOptionValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['product_version_id'] = $data['product_version_id'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['tenant_id'] = $data['tenant_id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['traits'] = $data['traits'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['sort_index'] = $data['sort_index'] ?? null;
        $this->container['tag'] = $data['tag'] ?? null;
        $this->container['use_for_design_binding'] = $data['use_for_design_binding'] ?? null;
        $this->container['use_for_mockup_binding'] = $data['use_for_mockup_binding'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['tooltip'] = $data['tooltip'] ?? null;
        $this->container['appearance_data'] = $data['appearance_data'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['product_option_values'] = $data['product_option_values'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Product option identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_version_id
     *
     * @return int|null
     */
    public function getProductVersionId()
    {
        return $this->container['product_version_id'];
    }

    /**
     * Sets product_version_id
     *
     * @param int|null $product_version_id Product version identifier
     *
     * @return self
     */
    public function setProductVersionId($product_version_id)
    {
        $this->container['product_version_id'] = $product_version_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int|null $product_id Product identifier.
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return int|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param int|null $tenant_id Tenant identifier.
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Aurigma\Storefront\Products\Model\OptionType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Aurigma\Storefront\Products\Model\OptionType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets traits
     *
     * @return string[]|null
     */
    public function getTraits()
    {
        return $this->container['traits'];
    }

    /**
     * Sets traits
     *
     * @param string[]|null $traits Option traits.
     *
     * @return self
     */
    public function setTraits($traits)
    {
        $this->container['traits'] = $traits;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Product option title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets sort_index
     *
     * @return int|null
     */
    public function getSortIndex()
    {
        return $this->container['sort_index'];
    }

    /**
     * Sets sort_index
     *
     * @param int|null $sort_index Product option sort index.
     *
     * @return self
     */
    public function setSortIndex($sort_index)
    {
        $this->container['sort_index'] = $sort_index;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Product option tag.
     *
     * @return self
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets use_for_design_binding
     *
     * @return bool|null
     */
    public function getUseForDesignBinding()
    {
        return $this->container['use_for_design_binding'];
    }

    /**
     * Sets use_for_design_binding
     *
     * @param bool|null $use_for_design_binding Specifies if the option is used for design binding.
     *
     * @return self
     */
    public function setUseForDesignBinding($use_for_design_binding)
    {
        $this->container['use_for_design_binding'] = $use_for_design_binding;

        return $this;
    }

    /**
     * Gets use_for_mockup_binding
     *
     * @return bool|null
     */
    public function getUseForMockupBinding()
    {
        return $this->container['use_for_mockup_binding'];
    }

    /**
     * Sets use_for_mockup_binding
     *
     * @param bool|null $use_for_mockup_binding Specifies if the option is used for mockup binding.
     *
     * @return self
     */
    public function setUseForMockupBinding($use_for_mockup_binding)
    {
        $this->container['use_for_mockup_binding'] = $use_for_mockup_binding;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Product option description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tooltip
     *
     * @return string|null
     */
    public function getTooltip()
    {
        return $this->container['tooltip'];
    }

    /**
     * Sets tooltip
     *
     * @param string|null $tooltip Product option tooltip.
     *
     * @return self
     */
    public function setTooltip($tooltip)
    {
        $this->container['tooltip'] = $tooltip;

        return $this;
    }

    /**
     * Gets appearance_data
     *
     * @return \Aurigma\Storefront\Products\Model\AppearanceDataDto|null
     */
    public function getAppearanceData()
    {
        return $this->container['appearance_data'];
    }

    /**
     * Sets appearance_data
     *
     * @param \Aurigma\Storefront\Products\Model\AppearanceDataDto|null $appearance_data appearance_data
     *
     * @return self
     */
    public function setAppearanceData($appearance_data)
    {
        $this->container['appearance_data'] = $appearance_data;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Aurigma\Storefront\Products\Model\ImageInfo|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Aurigma\Storefront\Products\Model\ImageInfo|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets product_option_values
     *
     * @return \Aurigma\Storefront\Products\Model\ProductOptionValueDto[]|null
     */
    public function getProductOptionValues()
    {
        return $this->container['product_option_values'];
    }

    /**
     * Sets product_option_values
     *
     * @param \Aurigma\Storefront\Products\Model\ProductOptionValueDto[]|null $product_option_values A list of product option values.
     *
     * @return self
     */
    public function setProductOptionValues($product_option_values)
    {
        $this->container['product_option_values'] = $product_option_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


